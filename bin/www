#!/usr/bin/env node

let cluster = require('cluster');

let numCPUs = process.env.NODE_ENV === 'production' ? require('os').cpus().length : 1;

if (cluster.isMaster) {
	console.log('Master ' + process.pid  + ' is running');

	// Fork workers.
	for (let i = 0; i < numCPUs; i++) {
		cluster.fork();
	}

	cluster.on('exit', function(worker) { //, code, signal
		console.log('worker ' + worker.process.pid + ' died');
    });
} else {

    /** Normalize a port into a number, string, or false. */
    function normalizePort(val) {
        let port = parseInt(val, 10);
        if (isNaN(port)) return val;
        if (port >= 0) return port;

        return false;
    }

    /** Module dependencies. */
    global.workerId = cluster.worker.id;
    let app = require('../app');
    let http = require('http');
    let chalk = require('chalk');

    app.set('port', normalizePort(process.env.PORT || 3000 ) );
    let server = http.createServer(app);

	/** Listen on provided port, on all network interfaces. */
	server.listen(app.get('port'), function(){
        let addr = server.address();
        let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
		// Log how we are running
		logger.info(chalk.green('listening on port ' +bind + ', listening in [' + app.settings.env + '] mode.' + '\n' + 'Ctrl+C to shut down. ;)'));

		process.on('SIGINT', function () {
			logger.info(chalk.green('app has shutdown : ' + 'app was running for ' + Math.round(process.uptime()).toString() + ' seconds.')
			);
			process.exit(0);
		});
	});
	server.on('error', onError);
	server.on('listening', onListening);


	/**Event listener for HTTP server "error" event.*/
	function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(port + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(port + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}

	function onListening() {

	}

	process.on('uncaughtException', function(err) {
		console.log("uncaughtException");
		if(err.message.indexOf('ECONNRESET') !== -1) {
            console.error(err.stack);
			console.error('TCP is disconnected.');
        }
		else {
            console.error(err);
			process.exit();
        }
	});

}